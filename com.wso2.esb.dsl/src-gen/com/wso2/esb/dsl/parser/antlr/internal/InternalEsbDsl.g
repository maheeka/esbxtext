/*
 * generated by Xtext 2.9.0
 */
grammar InternalEsbDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.wso2.esb.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.wso2.esb.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.wso2.esb.dsl.services.EsbDslGrammarAccess;

}

@parser::members {

 	private EsbDslGrammarAccess grammarAccess;

    public InternalEsbDslParser(TokenStream input, EsbDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected EsbDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='@startuml'
							{
								newLeafNode(otherlv_1, grammarAccess.getModelAccess().getStartumlKeyword_0_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getModelAccess().getParticipantsParticipantStatementParserRuleCall_0_1_0());
									}
									lv_participants_2_0=ruleParticipantStatement
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getModelRule());
										}
										add(
											$current,
											"participants",
											lv_participants_2_0,
											"com.wso2.esb.dsl.EsbDsl.ParticipantStatement");
										afterParserOrEnumRuleCall();
									}
								)
							)*
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								(
									{
										newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_0_0());
									}
									lv_statements_3_0=ruleStatement
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getModelRule());
										}
										add(
											$current,
											"statements",
											lv_statements_3_0,
											"com.wso2.esb.dsl.EsbDsl.Statement");
										afterParserOrEnumRuleCall();
									}
								)
							)*
							otherlv_4='@enduml'
							{
								newLeafNode(otherlv_4, grammarAccess.getModelAccess().getEndumlKeyword_1_1());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getModelAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getProcessingStatementParserRuleCall_0());
		}
		this_ProcessingStatement_0=ruleProcessingStatement
		{
			$current = $this_ProcessingStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRoutingStatementParserRuleCall_1());
		}
		this_RoutingStatement_1=ruleRoutingStatement
		{
			$current = $this_RoutingStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getParallelStatementParserRuleCall_2());
		}
		this_ParallelStatement_2=ruleParallelStatement
		{
			$current = $this_ParallelStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3());
		}
		this_IfStatement_3=ruleIfStatement
		{
			$current = $this_IfStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_4());
		}
		this_LoopStatement_4=ruleLoopStatement
		{
			$current = $this_LoopStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGroupStatementParserRuleCall_5());
		}
		this_GroupStatement_5=ruleGroupStatement
		{
			$current = $this_GroupStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRefStatementParserRuleCall_6());
		}
		this_RefStatement_6=ruleRefStatement
		{
			$current = $this_RefStatement_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleProcessingStatement
entryRuleProcessingStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessingStatementRule()); }
	iv_ruleProcessingStatement=ruleProcessingStatement
	{ $current=$iv_ruleProcessingStatement.current; }
	EOF;

// Rule ProcessingStatement
ruleProcessingStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='message_processor'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessingStatementAccess().getMessage_processorKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessingStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProcessingStatementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessingStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getProcessingStatementAccess().getRightParenthesisKeyword_3_0());
			}
			    |
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getProcessingStatementAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						lv_configs_5_0=RULE_STRING
						{
							newLeafNode(lv_configs_5_0, grammarAccess.getProcessingStatementAccess().getConfigsSTRINGTerminalRuleCall_3_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProcessingStatementRule());
							}
							setWithLastConsumed(
								$current,
								"configs",
								lv_configs_5_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				otherlv_6=')'
				{
					newLeafNode(otherlv_6, grammarAccess.getProcessingStatementAccess().getRightParenthesisKeyword_3_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleRoutingStatement
entryRuleRoutingStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoutingStatementRule()); }
	iv_ruleRoutingStatement=ruleRoutingStatement
	{ $current=$iv_ruleRoutingStatement.current; }
	EOF;

// Rule RoutingStatement
ruleRoutingStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='routing'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoutingStatementAccess().getRoutingKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoutingStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoutingStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleParallelStatement
entryRuleParallelStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParallelStatementRule()); }
	iv_ruleParallelStatement=ruleParallelStatement
	{ $current=$iv_ruleParallelStatement.current; }
	EOF;

// Rule ParallelStatement
ruleParallelStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parallel'
		{
			newLeafNode(otherlv_0, grammarAccess.getParallelStatementAccess().getParallelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParallelStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParallelStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='alt'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getAltKeyword_0());
		}
		(
			(
				lv_expression_1_0=RULE_STRING
				{
					newLeafNode(lv_expression_1_0, grammarAccess.getIfStatementAccess().getExpressionSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIfStatementRule());
					}
					setWithLastConsumed(
						$current,
						"expression",
						lv_expression_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopStatementRule()); }
	iv_ruleLoopStatement=ruleLoopStatement
	{ $current=$iv_ruleLoopStatement.current; }
	EOF;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='loop'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopStatementAccess().getLoopKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLoopStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleGroupStatement
entryRuleGroupStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupStatementRule()); }
	iv_ruleGroupStatement=ruleGroupStatement
	{ $current=$iv_ruleGroupStatement.current; }
	EOF;

// Rule GroupStatement
ruleGroupStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='group'
		{
			newLeafNode(otherlv_0, grammarAccess.getGroupStatementAccess().getGroupKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGroupStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGroupStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRefStatement
entryRuleRefStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefStatementRule()); }
	iv_ruleRefStatement=ruleRefStatement
	{ $current=$iv_ruleRefStatement.current; }
	EOF;

// Rule RefStatement
ruleRefStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ref'
		{
			newLeafNode(otherlv_0, grammarAccess.getRefStatementAccess().getRefKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRefStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRefStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleParticipantStatement
entryRuleParticipantStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParticipantStatementRule()); }
	iv_ruleParticipantStatement=ruleParticipantStatement
	{ $current=$iv_ruleParticipantStatement.current; }
	EOF;

// Rule ParticipantStatement
ruleParticipantStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='participant'
		{
			newLeafNode(otherlv_0, grammarAccess.getParticipantStatementAccess().getParticipantKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParticipantStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParticipantStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getParticipantStatementAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParticipantStatementAccess().getParticipantTypeParticipantTypeEnumRuleCall_3_0());
				}
				lv_participantType_3_0=ruleParticipantType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParticipantStatementRule());
					}
					set(
						$current,
						"participantType",
						lv_participantType_3_0,
						"com.wso2.esb.dsl.EsbDsl.ParticipantType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getParticipantStatementAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				lv_description_5_0=RULE_STRING
				{
					newLeafNode(lv_description_5_0, grammarAccess.getParticipantStatementAccess().getDescriptionSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParticipantStatementRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getParticipantStatementAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleIntegrationFlowDef
entryRuleIntegrationFlowDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegrationFlowDefRule()); }
	iv_ruleIntegrationFlowDef=ruleIntegrationFlowDef
	{ $current=$iv_ruleIntegrationFlowDef.current; }
	EOF;

// Rule IntegrationFlowDef
ruleIntegrationFlowDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IntegrationFlow'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntegrationFlowDefAccess().getIntegrationFlowKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegrationFlowDefAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_Definition_2_0=RULE_STRING
				{
					newLeafNode(lv_Definition_2_0, grammarAccess.getIntegrationFlowDefAccess().getDefinitionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegrationFlowDefRule());
					}
					setWithLastConsumed(
						$current,
						"Definition",
						lv_Definition_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntegrationFlowDefAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleCOLON
entryRuleCOLON returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOLONRule()); }
	iv_ruleCOLON=ruleCOLON
	{ $current=$iv_ruleCOLON.current.getText(); }
	EOF;

// Rule COLON
ruleCOLON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=':'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOLONAccess().getColonKeyword());
	}
;

// Entry rule entryRulePARTICIPANT
entryRulePARTICIPANT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPARTICIPANTRule()); }
	iv_rulePARTICIPANT=rulePARTICIPANT
	{ $current=$iv_rulePARTICIPANT.current.getText(); }
	EOF;

// Rule PARTICIPANT
rulePARTICIPANT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='participant'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPARTICIPANTAccess().getParticipantKeyword());
	}
;

// Rule ParticipantType
ruleParticipantType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='IntegrationFlow'
			{
				$current = grammarAccess.getParticipantTypeAccess().getINTEGRATIONFLOWEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getParticipantTypeAccess().getINTEGRATIONFLOWEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='InboundEndpoint'
			{
				$current = grammarAccess.getParticipantTypeAccess().getINBOUNDENDPOINTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getParticipantTypeAccess().getINBOUNDENDPOINTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='OutboundEndpoint'
			{
				$current = grammarAccess.getParticipantTypeAccess().getOUTBOUNDENDPOINTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getParticipantTypeAccess().getOUTBOUNDENDPOINTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Pipeline'
			{
				$current = grammarAccess.getParticipantTypeAccess().getPIPELINEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getParticipantTypeAccess().getPIPELINEEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
