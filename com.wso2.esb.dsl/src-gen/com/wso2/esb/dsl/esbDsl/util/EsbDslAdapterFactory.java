/**
 * generated by Xtext 2.9.0
 */
package com.wso2.esb.dsl.esbDsl.util;

import com.wso2.esb.dsl.esbDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.wso2.esb.dsl.esbDsl.EsbDslPackage
 * @generated
 */
public class EsbDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EsbDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EsbDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = EsbDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EsbDslSwitch<Adapter> modelSwitch =
    new EsbDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseProcessingStatement(ProcessingStatement object)
      {
        return createProcessingStatementAdapter();
      }
      @Override
      public Adapter caseRoutingStatement(RoutingStatement object)
      {
        return createRoutingStatementAdapter();
      }
      @Override
      public Adapter caseParallelStatement(ParallelStatement object)
      {
        return createParallelStatementAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseLoopStatement(LoopStatement object)
      {
        return createLoopStatementAdapter();
      }
      @Override
      public Adapter caseGroupStatement(GroupStatement object)
      {
        return createGroupStatementAdapter();
      }
      @Override
      public Adapter caseRefStatement(RefStatement object)
      {
        return createRefStatementAdapter();
      }
      @Override
      public Adapter caseParticipantStatement(ParticipantStatement object)
      {
        return createParticipantStatementAdapter();
      }
      @Override
      public Adapter caseIntegrationFlowParticipant(IntegrationFlowParticipant object)
      {
        return createIntegrationFlowParticipantAdapter();
      }
      @Override
      public Adapter caseIntegrationFlowDef(IntegrationFlowDef object)
      {
        return createIntegrationFlowDefAdapter();
      }
      @Override
      public Adapter caseInboundEndpointDefStatement(InboundEndpointDefStatement object)
      {
        return createInboundEndpointDefStatementAdapter();
      }
      @Override
      public Adapter casePipelineDefStatement(PipelineDefStatement object)
      {
        return createPipelineDefStatementAdapter();
      }
      @Override
      public Adapter caseOutboundEndpointDefStatement(OutboundEndpointDefStatement object)
      {
        return createOutboundEndpointDefStatementAdapter();
      }
      @Override
      public Adapter caseMediatorDefStatement(MediatorDefStatement object)
      {
        return createMediatorDefStatementAdapter();
      }
      @Override
      public Adapter caseCommand(Command object)
      {
        return createCommandAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.ProcessingStatement <em>Processing Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.ProcessingStatement
   * @generated
   */
  public Adapter createProcessingStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.RoutingStatement <em>Routing Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.RoutingStatement
   * @generated
   */
  public Adapter createRoutingStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.ParallelStatement <em>Parallel Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.ParallelStatement
   * @generated
   */
  public Adapter createParallelStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.LoopStatement <em>Loop Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.LoopStatement
   * @generated
   */
  public Adapter createLoopStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.GroupStatement <em>Group Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.GroupStatement
   * @generated
   */
  public Adapter createGroupStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.RefStatement <em>Ref Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.RefStatement
   * @generated
   */
  public Adapter createRefStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.ParticipantStatement <em>Participant Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.ParticipantStatement
   * @generated
   */
  public Adapter createParticipantStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.IntegrationFlowParticipant <em>Integration Flow Participant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.IntegrationFlowParticipant
   * @generated
   */
  public Adapter createIntegrationFlowParticipantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.IntegrationFlowDef <em>Integration Flow Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.IntegrationFlowDef
   * @generated
   */
  public Adapter createIntegrationFlowDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.InboundEndpointDefStatement <em>Inbound Endpoint Def Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.InboundEndpointDefStatement
   * @generated
   */
  public Adapter createInboundEndpointDefStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.PipelineDefStatement <em>Pipeline Def Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.PipelineDefStatement
   * @generated
   */
  public Adapter createPipelineDefStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.OutboundEndpointDefStatement <em>Outbound Endpoint Def Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.OutboundEndpointDefStatement
   * @generated
   */
  public Adapter createOutboundEndpointDefStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.MediatorDefStatement <em>Mediator Def Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.MediatorDefStatement
   * @generated
   */
  public Adapter createMediatorDefStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.wso2.esb.dsl.esbDsl.Command <em>Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.wso2.esb.dsl.esbDsl.Command
   * @generated
   */
  public Adapter createCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //EsbDslAdapterFactory
