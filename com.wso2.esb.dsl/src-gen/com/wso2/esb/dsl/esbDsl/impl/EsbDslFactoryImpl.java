/**
 * generated by Xtext 2.9.0
 */
package com.wso2.esb.dsl.esbDsl.impl;

import com.wso2.esb.dsl.esbDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EsbDslFactoryImpl extends EFactoryImpl implements EsbDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EsbDslFactory init()
  {
    try
    {
      EsbDslFactory theEsbDslFactory = (EsbDslFactory)EPackage.Registry.INSTANCE.getEFactory(EsbDslPackage.eNS_URI);
      if (theEsbDslFactory != null)
      {
        return theEsbDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EsbDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EsbDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EsbDslPackage.MODEL: return createModel();
      case EsbDslPackage.STATEMENT: return createStatement();
      case EsbDslPackage.PROCESSING_STATEMENT: return createProcessingStatement();
      case EsbDslPackage.ROUTING_STATEMENT: return createRoutingStatement();
      case EsbDslPackage.PARALLEL_STATEMENT: return createParallelStatement();
      case EsbDslPackage.IF_STATEMENT: return createIfStatement();
      case EsbDslPackage.LOOP_STATEMENT: return createLoopStatement();
      case EsbDslPackage.GROUP_STATEMENT: return createGroupStatement();
      case EsbDslPackage.REF_STATEMENT: return createRefStatement();
      case EsbDslPackage.PARTICIPANT_STATEMENT: return createParticipantStatement();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EsbDslPackage.PARTICIPANT_TYPE:
        return createParticipantTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EsbDslPackage.PARTICIPANT_TYPE:
        return convertParticipantTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessingStatement createProcessingStatement()
  {
    ProcessingStatementImpl processingStatement = new ProcessingStatementImpl();
    return processingStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RoutingStatement createRoutingStatement()
  {
    RoutingStatementImpl routingStatement = new RoutingStatementImpl();
    return routingStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParallelStatement createParallelStatement()
  {
    ParallelStatementImpl parallelStatement = new ParallelStatementImpl();
    return parallelStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LoopStatement createLoopStatement()
  {
    LoopStatementImpl loopStatement = new LoopStatementImpl();
    return loopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupStatement createGroupStatement()
  {
    GroupStatementImpl groupStatement = new GroupStatementImpl();
    return groupStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefStatement createRefStatement()
  {
    RefStatementImpl refStatement = new RefStatementImpl();
    return refStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParticipantStatement createParticipantStatement()
  {
    ParticipantStatementImpl participantStatement = new ParticipantStatementImpl();
    return participantStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParticipantType createParticipantTypeFromString(EDataType eDataType, String initialValue)
  {
    ParticipantType result = ParticipantType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertParticipantTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EsbDslPackage getEsbDslPackage()
  {
    return (EsbDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EsbDslPackage getPackage()
  {
    return EsbDslPackage.eINSTANCE;
  }

} //EsbDslFactoryImpl
