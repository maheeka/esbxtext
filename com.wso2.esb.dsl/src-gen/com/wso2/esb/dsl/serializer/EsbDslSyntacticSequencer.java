/*
 * generated by Xtext 2.9.0
 */
package com.wso2.esb.dsl.serializer;

import com.google.inject.Inject;
import com.wso2.esb.dsl.services.EsbDslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class EsbDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected EsbDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_IntegrationFlowParticipant_WSTerminalRuleCall_3_p;
	protected AbstractElementAlias match_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__a;
	protected AbstractElementAlias match_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__p;
	protected AbstractElementAlias match_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__a;
	protected AbstractElementAlias match_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__p;
	protected AbstractElementAlias match_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__a;
	protected AbstractElementAlias match_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__p;
	protected AbstractElementAlias match_Model___EndumlKeyword_1_1_p_StartumlKeyword_0_0_p__p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (EsbDslGrammarAccess) access;
		match_IntegrationFlowParticipant_WSTerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getIntegrationFlowParticipantAccess().getWSTerminalRuleCall_3());
		match_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getEndumlKeyword_1_1()), new TokenAlias(true, true, grammarAccess.getModelAccess().getStartumlKeyword_0_0()));
		match_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getModelAccess().getEndumlKeyword_1_1()), new TokenAlias(true, true, grammarAccess.getModelAccess().getStartumlKeyword_0_0()));
		match_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__a = new GroupAlias(true, true, new TokenAlias(true, true, grammarAccess.getModelAccess().getEndumlKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getStartumlKeyword_0_0()));
		match_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__p = new GroupAlias(true, false, new TokenAlias(true, true, grammarAccess.getModelAccess().getEndumlKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getStartumlKeyword_0_0()));
		match_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getEndumlKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getStartumlKeyword_0_0()));
		match_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getModelAccess().getEndumlKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getStartumlKeyword_0_0()));
		match_Model___EndumlKeyword_1_1_p_StartumlKeyword_0_0_p__p = new GroupAlias(true, false, new TokenAlias(true, false, grammarAccess.getModelAccess().getEndumlKeyword_1_1()), new TokenAlias(true, false, grammarAccess.getModelAccess().getStartumlKeyword_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOLONRule())
			return getCOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPARTICIPANTRule())
			return getPARTICIPANTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * COLON:
	 * 	':'
	 * ;
	 */
	protected String getCOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * PARTICIPANT :
	 * 	'participant'
	 * ;
	 */
	protected String getPARTICIPANTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "participant";
	}
	
	/**
	 * terminal WS			: (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_IntegrationFlowParticipant_WSTerminalRuleCall_3_p.equals(syntax))
				emit_IntegrationFlowParticipant_WSTerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__a.equals(syntax))
				emit_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__p.equals(syntax))
				emit_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__a.equals(syntax))
				emit_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__p.equals(syntax))
				emit_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__a.equals(syntax))
				emit_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__p.equals(syntax))
				emit_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___EndumlKeyword_1_1_p_StartumlKeyword_0_0_p__p.equals(syntax))
				emit_Model___EndumlKeyword_1_1_p_StartumlKeyword_0_0_p__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID COLON (ambiguity) 'IntegrationFlow' '(' Definition=STRING
	 */
	protected void emit_IntegrationFlowParticipant_WSTerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('@enduml' '@startuml'*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     statements+=Statement (ambiguity) statements+=Statement
	 */
	protected void emit_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('@enduml' '@startuml'*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     statements+=Statement (ambiguity) (rule end)
	 */
	protected void emit_Model___EndumlKeyword_1_1_StartumlKeyword_0_0_a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('@enduml'* '@startuml')*
	 *
	 * This ambiguous syntax occurs at:
	 *     participants+=ParticipantStatement (ambiguity) participants+=ParticipantStatement
	 */
	protected void emit_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('@enduml'* '@startuml')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) participants+=ParticipantStatement
	 */
	protected void emit_Model___EndumlKeyword_1_1_a_StartumlKeyword_0_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('@startuml' | '@enduml')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) statements+=Statement
	 *     participants+=ParticipantStatement (ambiguity) (rule end)
	 *     participants+=ParticipantStatement (ambiguity) statements+=Statement
	 */
	protected void emit_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('@startuml' | '@enduml')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Model___EndumlKeyword_1_1_or_StartumlKeyword_0_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('@enduml'+ '@startuml'+)+
	 *
	 * This ambiguous syntax occurs at:
	 *     statements+=Statement (ambiguity) participants+=ParticipantStatement
	 */
	protected void emit_Model___EndumlKeyword_1_1_p_StartumlKeyword_0_0_p__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
