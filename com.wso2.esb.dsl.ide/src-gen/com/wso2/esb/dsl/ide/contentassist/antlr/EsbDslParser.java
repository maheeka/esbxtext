/*
 * generated by Xtext 2.9.0
 */
package com.wso2.esb.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.wso2.esb.dsl.ide.contentassist.antlr.internal.InternalEsbDslParser;
import com.wso2.esb.dsl.services.EsbDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class EsbDslParser extends AbstractContentAssistParser {

	@Inject
	private EsbDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEsbDslParser createParser() {
		InternalEsbDslParser result = new InternalEsbDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getProcessingStatementAccess().getAlternatives_3(), "rule__ProcessingStatement__Alternatives_3");
					put(grammarAccess.getCommandAccess().getAlternatives_3(), "rule__Command__Alternatives_3");
					put(grammarAccess.getParticipantTypeAccess().getAlternatives(), "rule__ParticipantType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup_0(), "rule__Model__Group_0__0");
					put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
					put(grammarAccess.getProcessingStatementAccess().getGroup(), "rule__ProcessingStatement__Group__0");
					put(grammarAccess.getProcessingStatementAccess().getGroup_3_1(), "rule__ProcessingStatement__Group_3_1__0");
					put(grammarAccess.getRoutingStatementAccess().getGroup(), "rule__RoutingStatement__Group__0");
					put(grammarAccess.getParallelStatementAccess().getGroup(), "rule__ParallelStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getLoopStatementAccess().getGroup(), "rule__LoopStatement__Group__0");
					put(grammarAccess.getGroupStatementAccess().getGroup(), "rule__GroupStatement__Group__0");
					put(grammarAccess.getRefStatementAccess().getGroup(), "rule__RefStatement__Group__0");
					put(grammarAccess.getParticipantStatementAccess().getGroup(), "rule__ParticipantStatement__Group__0");
					put(grammarAccess.getIntegrationFlowParticipantAccess().getGroup(), "rule__IntegrationFlowParticipant__Group__0");
					put(grammarAccess.getIntegrationFlowDefAccess().getGroup(), "rule__IntegrationFlowDef__Group__0");
					put(grammarAccess.getInboundEndpointDefStatementAccess().getGroup(), "rule__InboundEndpointDefStatement__Group__0");
					put(grammarAccess.getPipelineDefStatementAccess().getGroup(), "rule__PipelineDefStatement__Group__0");
					put(grammarAccess.getOutboundEndpointDefStatementAccess().getGroup(), "rule__OutboundEndpointDefStatement__Group__0");
					put(grammarAccess.getMediatorDefStatementAccess().getGroup(), "rule__MediatorDefStatement__Group__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_3_1(), "rule__Command__Group_3_1__0");
					put(grammarAccess.getModelAccess().getParticipantsAssignment_0_1(), "rule__Model__ParticipantsAssignment_0_1");
					put(grammarAccess.getModelAccess().getStatementsAssignment_1_0(), "rule__Model__StatementsAssignment_1_0");
					put(grammarAccess.getProcessingStatementAccess().getNameAssignment_2(), "rule__ProcessingStatement__NameAssignment_2");
					put(grammarAccess.getProcessingStatementAccess().getConfigsAssignment_3_1_1(), "rule__ProcessingStatement__ConfigsAssignment_3_1_1");
					put(grammarAccess.getRoutingStatementAccess().getNameAssignment_1(), "rule__RoutingStatement__NameAssignment_1");
					put(grammarAccess.getParallelStatementAccess().getNameAssignment_1(), "rule__ParallelStatement__NameAssignment_1");
					put(grammarAccess.getIfStatementAccess().getExpressionAssignment_1(), "rule__IfStatement__ExpressionAssignment_1");
					put(grammarAccess.getLoopStatementAccess().getNameAssignment_1(), "rule__LoopStatement__NameAssignment_1");
					put(grammarAccess.getGroupStatementAccess().getNameAssignment_1(), "rule__GroupStatement__NameAssignment_1");
					put(grammarAccess.getRefStatementAccess().getNameAssignment_1(), "rule__RefStatement__NameAssignment_1");
					put(grammarAccess.getParticipantStatementAccess().getNameAssignment_1(), "rule__ParticipantStatement__NameAssignment_1");
					put(grammarAccess.getParticipantStatementAccess().getParticipantTypeAssignment_3(), "rule__ParticipantStatement__ParticipantTypeAssignment_3");
					put(grammarAccess.getParticipantStatementAccess().getDescriptionAssignment_5(), "rule__ParticipantStatement__DescriptionAssignment_5");
					put(grammarAccess.getIntegrationFlowParticipantAccess().getNameAssignment_1(), "rule__IntegrationFlowParticipant__NameAssignment_1");
					put(grammarAccess.getIntegrationFlowDefAccess().getDefinitionAssignment_2(), "rule__IntegrationFlowDef__DefinitionAssignment_2");
					put(grammarAccess.getInboundEndpointDefStatementAccess().getNameAssignment_1(), "rule__InboundEndpointDefStatement__NameAssignment_1");
					put(grammarAccess.getPipelineDefStatementAccess().getNameAssignment_1(), "rule__PipelineDefStatement__NameAssignment_1");
					put(grammarAccess.getOutboundEndpointDefStatementAccess().getNameAssignment_1(), "rule__OutboundEndpointDefStatement__NameAssignment_1");
					put(grammarAccess.getMediatorDefStatementAccess().getNameAssignment_1(), "rule__MediatorDefStatement__NameAssignment_1");
					put(grammarAccess.getCommandAccess().getNameAssignment_2(), "rule__Command__NameAssignment_2");
					put(grammarAccess.getCommandAccess().getConfigsAssignment_3_1_1(), "rule__Command__ConfigsAssignment_3_1_1");
					put(grammarAccess.getModelAccess().getUnorderedGroup(), "rule__Model__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalEsbDslParser typedParser = (InternalEsbDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EsbDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EsbDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
