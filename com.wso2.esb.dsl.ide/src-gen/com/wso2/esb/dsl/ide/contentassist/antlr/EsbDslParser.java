/*
 * generated by Xtext 2.9.0
 */
package com.wso2.esb.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.wso2.esb.dsl.ide.contentassist.antlr.internal.InternalEsbDslParser;
import com.wso2.esb.dsl.services.EsbDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class EsbDslParser extends AbstractContentAssistParser {

	@Inject
	private EsbDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEsbDslParser createParser() {
		InternalEsbDslParser result = new InternalEsbDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives_3(), "rule__Command__Alternatives_3");
					put(grammarAccess.getParticipantAccess().getGroup(), "rule__Participant__Group__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_3_1(), "rule__Command__Group_3_1__0");
					put(grammarAccess.getModelAccess().getParticipantsAssignment_0(), "rule__Model__ParticipantsAssignment_0");
					put(grammarAccess.getModelAccess().getCommandsAssignment_1(), "rule__Model__CommandsAssignment_1");
					put(grammarAccess.getParticipantAccess().getNameAssignment_1(), "rule__Participant__NameAssignment_1");
					put(grammarAccess.getParticipantAccess().getDescriptionAssignment_3(), "rule__Participant__DescriptionAssignment_3");
					put(grammarAccess.getCommandAccess().getNameAssignment_2(), "rule__Command__NameAssignment_2");
					put(grammarAccess.getCommandAccess().getConfigsAssignment_3_1_1(), "rule__Command__ConfigsAssignment_3_1_1");
					put(grammarAccess.getModelAccess().getUnorderedGroup(), "rule__Model__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalEsbDslParser typedParser = (InternalEsbDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EsbDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EsbDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
