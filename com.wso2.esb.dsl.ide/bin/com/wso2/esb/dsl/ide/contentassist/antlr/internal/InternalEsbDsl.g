/*
 * generated by Xtext 2.9.0
 */
grammar InternalEsbDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.wso2.esb.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.wso2.esb.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.wso2.esb.dsl.services.EsbDslGrammarAccess;

}
@parser::members {
	private EsbDslGrammarAccess grammarAccess;

	public void setGrammarAccess(EsbDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getUnorderedGroup()); }
		(rule__Model__UnorderedGroup)
		{ after(grammarAccess.getModelAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParticipant
entryRuleParticipant
:
{ before(grammarAccess.getParticipantRule()); }
	 ruleParticipant
{ after(grammarAccess.getParticipantRule()); } 
	 EOF 
;

// Rule Participant
ruleParticipant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParticipantAccess().getGroup()); }
		(rule__Participant__Group__0)
		{ after(grammarAccess.getParticipantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getRightParenthesisKeyword_3_0()); }
		')'
		{ after(grammarAccess.getCommandAccess().getRightParenthesisKeyword_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGroup_3_1()); }
		(rule__Command__Group_3_1__0)
		{ after(grammarAccess.getCommandAccess().getGroup_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Participant__Group__0__Impl
	rule__Participant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParticipantAccess().getParticipantKeyword_0()); }
	'participant'
	{ after(grammarAccess.getParticipantAccess().getParticipantKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Participant__Group__1__Impl
	rule__Participant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParticipantAccess().getNameAssignment_1()); }
	(rule__Participant__NameAssignment_1)
	{ after(grammarAccess.getParticipantAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Participant__Group__2__Impl
	rule__Participant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParticipantAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getParticipantAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Participant__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParticipantAccess().getDescriptionAssignment_3()); }
	(rule__Participant__DescriptionAssignment_3)
	{ after(grammarAccess.getParticipantAccess().getDescriptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getMessage_processorKeyword_0()); }
	'message_processor'
	{ after(grammarAccess.getCommandAccess().getMessage_processorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
	rule__Command__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getCommandAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__2__Impl
	rule__Command__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getNameAssignment_2()); }
	(rule__Command__NameAssignment_2)
	{ after(grammarAccess.getCommandAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getAlternatives_3()); }
	(rule__Command__Alternatives_3)
	{ after(grammarAccess.getCommandAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_3_1__0__Impl
	rule__Command__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getCommandAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_3_1__1__Impl
	rule__Command__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getConfigsAssignment_3_1_1()); }
	(rule__Command__ConfigsAssignment_3_1_1)
	{ after(grammarAccess.getCommandAccess().getConfigsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_3_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_3_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getRightParenthesisKeyword_3_1_2()); }
	')'
	{ after(grammarAccess.getCommandAccess().getRightParenthesisKeyword_3_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup());
	}
:
	rule__Model__UnorderedGroup__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Model__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getModelAccess().getParticipantsAssignment_0()); }
						(rule__Model__ParticipantsAssignment_0)
						{ after(grammarAccess.getModelAccess().getParticipantsAssignment_0()); }
					)
					(
						{ before(grammarAccess.getModelAccess().getParticipantsAssignment_0()); }
						((rule__Model__ParticipantsAssignment_0)=>rule__Model__ParticipantsAssignment_0)*
						{ after(grammarAccess.getModelAccess().getParticipantsAssignment_0()); }
					)
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getModelAccess().getCommandsAssignment_1()); }
						(rule__Model__CommandsAssignment_1)
						{ after(grammarAccess.getModelAccess().getCommandsAssignment_1()); }
					)
					(
						{ before(grammarAccess.getModelAccess().getCommandsAssignment_1()); }
						((rule__Model__CommandsAssignment_1)=>rule__Model__CommandsAssignment_1)*
						{ after(grammarAccess.getModelAccess().getCommandsAssignment_1()); }
					)
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Model__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__UnorderedGroup__Impl
	rule__Model__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ParticipantsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getParticipantsParticipantParserRuleCall_0_0()); }
		ruleParticipant
		{ after(grammarAccess.getModelAccess().getParticipantsParticipantParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_1_0()); }
		ruleCommand
		{ after(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParticipantAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParticipantAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__DescriptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParticipantAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getParticipantAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getCommandAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ConfigsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getConfigsSTRINGTerminalRuleCall_3_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCommandAccess().getConfigsSTRINGTerminalRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
